{"version":3,"sources":["Utils/LocalUserInfo.js","Utils/RetryIfFailed.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","ResourcesList/LocalResourceExternalEditors.js","ResourcesList/LocalPiskelBridge.js","ResourcesList/LocalJfxrBridge.js","ResourcesList/LocalYarnBridge.js","Export/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","Export/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","Export/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","Export/LocalExporters/index.js","Export/LocalExporters/LocalCordovaExport.js","Export/LocalExporters/LocalElectronExport.js","Export/LocalExporters/LocalHTML5Export.js","Export/LocalExporters/LocalFacebookInstantGamesExport.js","UI/LocalFilePicker/index.js","Export/LocalExporters/LocalOnlineCordovaExport.js","Export/LocalExporters/LocalOnlineElectronExport.js","Export/LocalExporters/LocalOnlineWebExport.js","MainFrame/ElectronMainMenu.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","JsExtensionsLoader/LocalJsExtensionsFinder.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","Utils/ProcessByChunk.js","Utils/LocalFileUploader.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","ResourcesList/LocalEmbeddedResourceSources.js","ResourcesList/LocalResourceSources.js","LocalApp.js","Export/LocalExporters/LocalFileSystem.js","Utils/LocalFileDownloader.js","Utils/LocalArchiver.js","Export/LocalExporters/LocalFileUploader.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/index.js"],"names":["os","optionalRequire","getUID","userInfo","uid","e","retryIfFailed","fn","a","times","tries","latestError","latestReturnValue","electron","ipcRenderer","fs","path","moveUrlResourcesToLocalFiles","project","fileMetadata","onProgress","Error","resourcesManager","getResourcesManager","allResourceNames","getAllResourceNames","toJSArray","resourceToFetchNames","filter","resourceName","resource","getResource","isFetchableUrl","getFile","projectPath","dirname","fileIdentifier","baseAssetsPath","join","downloadedFilePaths","Set","erroredResources","fetchedResourcesCount","PromisePool","withConcurrency","for","process","url","filenameWithExtension","isProductAuthorizedResourceUrl","extractFilenameWithExtensionFromProductAuthorizedUrl","isPublicAssetResourceUrl","extractFilenameWithExtensionFromPublicAssetResourceUrl","extractFilenameFromProjectResourceUrl","extension","extname","filenameWithoutExtension","basename","name","newNameGenerator","tentativePath","existsSync","has","downloadedFilePath","add","ensureDir","invoke","setFile","relative","replace","push","error","length","editors","createDisplayName","editDisplayName","kind","edit","options","getStorageProvider","internalName","sendExternalEditorOpened","openPiskel","Window","showMessageBox","openJfxr","openYarn","gd","global","resourceNames","resourcesLoader","singleFrame","onChangesSaved","extraOptions","resources","map","originalIndex","resourcePath","getLocalResourceFullPath","getProjectFile","externalEditorData","removeAllListeners","on","event","outputResources","newAnimationName","metadata","data","pskl","forEach","createOrUpdateResource","ImageResource","setMetadata","JSON","stringify","send","newFilePath","AudioResource","jfxr","JsonResource","LocalPreviewLauncher","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","previewGameIndexHtmlPath","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","title","getName","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","err","serverParams","port","setTimeout","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","findGDJS","then","gdjsRoot","console","info","localFileSystem","LocalFileSystem","downloadUrlsToLocalFiles","fileSystem","assignIn","AbstractFileSystemJS","outputDir","getTempDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","startServer","catch","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","getDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","address","includeFileHashs","props","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","debuggerIds","getExistingDebuggerIds","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","exportProjectForPixiPreview","delete","debuggerId","sendMessage","command","checkUserHasSubscription","time","localPreviewDebuggerServer","this","ref","subscriptionChecker","onChangeSubscription","id","mode","open","onClose","onExport","onRunPreviewLocally","React","onResult","t0","performance","now","LocalNetworkDialog","actions","label","primary","onClick","secondaryActions","onRequestClose","value","fullWidth","debuggerServerState","debuggerServerAddress","callbacksList","Promise","reject","resolve","serverStartPromise","serverStartPromiseCompleted","onErrorReceived","debuggerIdIndex","indexOf","splice","onConnectionClosed","onConnectionOpened","onServerStateChanged","message","parsedMessage","parse","onHandleParsedMessage","warn","serverStartTimeoutPromise","race","getServerState","registerCallbacks","callbacks","callbacksIndex","localOnlineWebExporter","onlineWebExporter","exportPipeline","localOnlineWebExportPipeline","localAutomatedExporters","html5Exporter","localHTML5ExportPipeline","onlineCordovaExporter","localOnlineCordovaExportPipeline","onlineElectronExporter","localOnlineElectronExportPipeline","facebookInstantGamesExporter","localFacebookInstantGamesExportPipeline","localManualExporters","cordovaExporter","localCordovaExportPipeline","electronExporter","localElectronExportPipeline","shell","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","noMargin","type","defaultPath","onChange","setLastCompilationDirectory","renderLaunchButtonLabel","prepareExporter","context","launchExport","exportOptions","MapStringBoolean","set","exportWholePixiProject","urlFiles","getAllUrlFilesIn","launchResourcesDownload","urlContainers","updateStepProgress","throwIfAnyError","launchCompression","exportOutput","renderDoneFooter","openExportFolder","openPath","renderGameButton","remote","app","archiveOutputFilename","getPath","filters","extensions","temporaryOutputDir","mkDir","clearDir","archiveLocalFolder","outputFilename","dialog","styles","container","position","display","alignItems","button","marginLeft","textField","flex","LocalFilePicker","onChooseFolder","browserWindow","getCurrentWindow","showSaveDialog","filePath","style","undefined","margin","translatableHintText","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","exportStep","includes","archiveOutputDir","tmpdir","launchUpload","outputFile","getBuildFileUploadOptions","uploadOptions","uploadLocalFile","key","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","buildElectron","renderCustomStepsProgress","build","onSaveProject","sizeLimit","buildWeb","useIPCEventListener","ipcEvent","func","handler","eventArgs","removeListener","ElectronMainMenu","i18n","recentProjectFiles","shortcutMap","language","onChooseProject","onOpenRecentFile","onSaveProjectAs","onCloseProject","onCloseApp","onExportProject","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","onOpenGamesDashboard","setElectronUpdateStatus","buildMainMenuDeclarativeTemplate","isApplicationTopLevelMenu","useCommandWithOptions","generateOptions","item","text","loadExtension","require","findJsExtensionModules","module","exports","objectsEditorService","objectsRenderingService","filterExamples","onFindGDJS","loadAllExtensions","_","extensionModulePaths","all","extensionModulePath","extensionModule","rethrowException","ex","result","rawError","registerEditorConfigurations","registerInstanceRenderers","JsPlatform","get","extensionsRoot","readdir","extensionFolders","filteredExtensionFolders","folder","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","stats","isFile","modulePaths","modulePath","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","content","writeFile","writeBehaviorCode","behaviorCodeNamespace","writeObjectCode","objectCodeNamespace","writeJSONFile","object","filepath","stringifyException","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","serializedObject","serializeToJSObject","chooseCustomObjectFile","objectName","writeCustomObject","customObject","exportedObject","clone","setTags","getVariables","clear","getEffects","getAllBehaviorNames","removeBehavior","LocalEventsFunctionsExtensionOpener","showOpenDialog","properties","filePaths","readEventsFunctionExtensionFile","readFile","encoding","dataObject","readJSONFile","LocalGDJSDevelopmentWatcher","shouldWatch","PreferencesContext","values","useGDJSDevelopmentWatcher","moveNothing","moveAllLocalResourcesToCloudResources","oldFileMetadata","newFileMetadata","newCloudProjectId","allResourcesToUpload","resourceFile","isURL","checkIfIsGDevelopCloudBucketUrl","isBlobURL","Boolean","getResourcesToUpload","alreadyDoneCount","processByChunk","transformItem","resourceAbsolutePath","readLocalFileToFile","file","isChunkTooBig","resourceAndFilesChunk","reduce","size","processChunk","resourceAndFilesToUpload","getCredentialsForCloudProject","uploadProjectResourceFiles","count","total","uploadedProjectResourceFiles","index","movers","LocalFileStorageProvider","ProjectResourcesCopier","copyAllResourcesTo","CloudStorageProvider","UrlStorageProvider","moveAllCloudProjectResourcesToCloudProject","LocalResourceMover","moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","array","currentItemIndex","nextChunk","mappedItem","readLocalFileToArrayBuffer","buffer","arrayBuffer","slice","byteOffset","byteLength","extensionToMimeType","aac","wav","mp3","ogg","png","jpg","jpeg","webp","ttf","otf","mp4","webm","json","xml","gz","js","extensionWithoutLeadingDot","File","fetchers","moveUrlResourcesToCloudFilesIfPrivate","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","storageProvider","fetcher","copyAllEmbeddedResourcesToProjectFolder","filesWithEmbeddedResources","copies","hasAnyEmbeddedResourceOutsideProjectFolder","embeddedResources","embedded","isOutsideProjectFolder","resourceBasename","fullPath","fileExtension","fileNameWithoutExtension","newFileNameWithoutExtension","tentativeFileName","resourceNewPath","promises","copyFile","createAndMapEmbeddedResources","filesWithMappedResources","Map","mapping","resourceKind","relPath","theEmbeddedResource","createNewResource","setName","addResource","listTileMapEmbeddedResources","tileMap","__header__","dir","defs","tilesets","tileset","isPathInProjectFolder","levels","level","bgRelPath","embeddedResourcesParsers","tilemap","ResourceStoreChooser","onChooseResources","ResourceStore","onChoose","chosenResourceUrl","newResource","setOrigin","localResourceSources","allResourceKindsAndMetadata","fileExtensions","displayName","selectLocalFileResources","getLastUsedPath","setLastUsedPath","multiSelection","latestPath","lastUsedPath","hasFilesOutsideProjectFolder","some","parseEmbeddedResources","newToOldFilePaths","showConfirmDialog","copyAllToProjectFolder","filePathWithMapping","mappedResources","embeddedResourcesMapping","displayTab","onlyForStorageProvider","selectResourcesHeadless","renderComponent","justifyContent","RaisedButton","FileToCloudProjectResourceUploader","create","authentication","setUpContextMenu","appArguments","getArguments","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","storageProviders","defaultStorageProvider","getStorageProviderOperations","initialFileMetadataToOpen","renderMainMenu","renderPreviewLauncher","renderExportDialog","automatedExporters","manualExporters","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService","pathPosix","posix","_filesToDownload","pathPrefix","normalizedPathPrefix","normalize","Object","keys","mkdirsSync","dirExists","emptyDirSync","fileNameFrom","_downloadUrlsToLocalFiles","dirNameFrom","makeAbsolute","filename","baseDirectory","isAbsolute","makeRelative","charAt","source","dest","copySync","writeToFile","contents","outputFileSync","readFileSync","toString","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","normalizedFilePath","statSync","firstError","urlContainer","results","lazyRequireArchiver","optionalLazyRequire","archiver","createWriteStream","archive","zlib","fileSize","pointer","log","roundFileSizeInMb","Math","round","pipe","directory","finalize","localFilePath","stepCurrentProgress","stepMaxProgress","unsplit","isReferenceMagicPropertyName","getReferencePartialObject","maxUnsplitDepth","unsplitObject","currentObject","depth","indexOrPropertyName","reference","isReference","referenceTo","partialObject","getSlugifiedUniqueNameFromProperty","propertyName","existingNamesForReference","currentReference","property","newName","onOpenWithPicker","onOpen","referencePath","hasAutoSave","compareLastModified","autoSavePath","autoSavedTime","mtime","getTime","saveTime","onGetAutoSave","checkFileContent","expectedContent","verificationTime","toFixed","writeAndCheckFile","writeAndCheckFormattedJSONFile","writeProjectFiles","paths","serializedProjectObject","isFolderProject","partialObjects","pathSeparator","getArrayItemReferenceName","shouldSplit","createReference","splitObject","currentPath","Array","isArray","itemPath","itemReference","propertyPath","propertyReference","split","Date","lastModifiedDate","wasSaved","onChooseSaveProjectAsLocation","saveDialogOptions","showSaveDialogSync","saveAsLocation","onStartSaving","onMoveResources","setProjectFile","onAutoSaveProject","serializeToJSON","getWriteErrorMessage","memo","SvgIcon","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","renderIcon","Computer","fontSize","getFileMetadataFromAppArguments","POSITIONAL_ARGUMENTS_KEY","onRenderNewProjectSaveAsLocationChooser","setSaveAsLocation","newProjectsDefaultFolder","outputPath","LocalFolderPicker","newOutputPath","createOperations","getOpenErrorMessage"],"mappings":"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","file":"static/js/local-app.8b52dbcf.chunk.js","sourcesContent":["// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","//@flow\ntype Configuration = {| times: number |};\n\nexport const retryIfFailed = async <T>(\n  { times }: Configuration,\n  fn: () => Promise<T>\n): Promise<T> => {\n  let tries = 0;\n  let latestError = null;\n  while (tries < times) {\n    tries++;\n    latestError = null;\n    try {\n      const latestReturnValue = await fn();\n      return latestReturnValue;\n    } catch (error) {\n      latestError = error;\n    }\n  }\n\n  throw latestError;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nimport {\n  extractFilenameWithExtensionFromProductAuthorizedUrl,\n  isProductAuthorizedResourceUrl,\n} from '../../Utils/GDevelopServices/Shop';\nimport {\n  extractFilenameWithExtensionFromPublicAssetResourceUrl,\n  isPublicAssetResourceUrl,\n} from '../../Utils/GDevelopServices/Asset';\nimport { isFetchableUrl } from '../../ResourcesList/ResourceUtils';\nimport { extractFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n|};\n\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourceToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n\n    return isFetchableUrl(resource.getFile());\n  });\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourceToFetchNames)\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const url = resource.getFile();\n      let filenameWithExtension;\n      if (isProductAuthorizedResourceUrl(url)) {\n        // Resource is a private asset.\n        filenameWithExtension = extractFilenameWithExtensionFromProductAuthorizedUrl(\n          url\n        );\n      } else if (isPublicAssetResourceUrl(url)) {\n        // Resource is a public asset.\n        filenameWithExtension = extractFilenameWithExtensionFromPublicAssetResourceUrl(\n          url\n        );\n      } else {\n        // Resource is a project resource or a generic url.\n        filenameWithExtension = extractFilenameFromProjectResourceUrl(url);\n      }\n      const extension = path.extname(filenameWithExtension);\n      const filenameWithoutExtension = path.basename(\n        filenameWithExtension,\n        extension\n      );\n      const name = newNameGenerator(filenameWithoutExtension, name => {\n        const tentativePath = path.join(baseAssetsPath, name) + extension;\n        return (\n          fs.existsSync(tentativePath) || downloadedFilePaths.has(tentativePath)\n        );\n      });\n      const downloadedFilePath = path.join(baseAssetsPath, name) + extension;\n      downloadedFilePaths.add(downloadedFilePath);\n\n      try {\n        await retryIfFailed({ times: 2 }, async () => {\n          await fs.ensureDir(baseAssetsPath);\n          await ipcRenderer.invoke(\n            'local-file-download',\n            url,\n            downloadedFilePath\n          );\n          resource.setFile(\n            path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n          );\n        });\n      } catch (error) {\n        erroredResources.push({ resourceName, error });\n      }\n\n      onProgress(fetchedResourcesCount++, resourceToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\nimport { openPiskel } from './LocalPiskelBridge';\nimport { openJfxr } from './LocalJfxrBridge';\nimport { openYarn } from './LocalYarnBridge';\nimport { type ResourceExternalEditor } from './ResourceExternalEditor.flow';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\nimport { t } from '@lingui/macro';\nimport Window from '../Utils/Window';\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    createDisplayName: t`Create with Piskel`,\n    editDisplayName: t`Edit with Piskel`,\n    kind: 'image',\n    edit: options => {\n      const storageProvider = options.getStorageProvider();\n      if (storageProvider.internalName !== 'LocalFile') {\n        Window.showMessageBox(\n          'Piskel is only supported when your project is saved locally. It will be available for Cloud projects in a future version. To use Piskel, save your project on your computer first.'\n        );\n        return;\n      }\n\n      sendExternalEditorOpened('piskel');\n      return openPiskel(options);\n    },\n  },\n  {\n    name: 'Jfxr',\n    createDisplayName: t`Create with Jfxr`,\n    editDisplayName: t`Edit with Jfxr`,\n    kind: 'audio',\n    edit: options => {\n      const storageProvider = options.getStorageProvider();\n      if (storageProvider.internalName !== 'LocalFile') {\n        Window.showMessageBox(\n          'Jfxr is only supported when your project is saved locally. It will be available for Cloud projects in a future version. To use Jfxr, save your project on your computer first.'\n        );\n        return;\n      }\n\n      sendExternalEditorOpened('jfxr');\n      return openJfxr(options);\n    },\n  },\n  {\n    name: 'Yarn',\n    createDisplayName: t`Create with Yarn`,\n    editDisplayName: t`Edit with Yarn`,\n    kind: 'json',\n    edit: options => {\n      const storageProvider = options.getStorageProvider();\n      if (storageProvider.internalName !== 'LocalFile') {\n        Window.showMessageBox(\n          'Yarn is only supported when your project is saved locally. It will be available for Cloud projects in a future version. To use Yarn, save your project on your computer first.'\n        );\n        return;\n      }\n\n      sendExternalEditorOpened('yarn');\n      return openYarn(options);\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open Piskel editor for the specified resources.\n * Take a list of resource names to be edited and will call the callback methods\n * (notably onChangesSaved with the name of the edited resources)\n */\nexport const openPiskel = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  singleFrame,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n\n  const resources = resourceNames.map((resourceName, originalIndex) => {\n    let resourcePath = getLocalResourceFullPath(project, resourceName);\n    return {\n      resourcePath,\n      resourceName,\n      originalIndex,\n    };\n  });\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const externalEditorData = {\n    ...extraOptions,\n    resources,\n    singleFrame,\n    projectPath,\n  };\n\n  // Listen to events meaning that edition in Piskel is finished\n  ipcRenderer.removeAllListeners('piskel-changes-saved');\n  ipcRenderer.on(\n    'piskel-changes-saved',\n    (event, outputResources, newAnimationName, externalEditorData) => {\n      const metadata = externalEditorData.data\n        ? { pskl: externalEditorData }\n        : null;\n\n      const resourcesManager = project.getResourcesManager();\n      outputResources.forEach(resource => {\n        resource.name = path.relative(projectPath, resource.path); // Still needed for onChangesSaved()\n        createOrUpdateResource(project, new gd.ImageResource(), resource.name);\n      });\n\n      outputResources[0].metadata = metadata;\n      outputResources[0].newAnimationName = newAnimationName;\n      // in case this is for a single frame object, save the metadata in the Image object\n      if (externalEditorData.singleFrame) {\n        if (metadata) {\n          resourcesManager\n            .getResource(path.relative(projectPath, outputResources[0].path))\n            .setMetadata(JSON.stringify(metadata));\n        }\n        onChangesSaved(outputResources);\n      } else {\n        // In case there are multiple frames, pass back the metadata to the editor and let it store it at an appropriate place.\n        // (For example, for sprites, SpritesList.js will save it in the metadata of the gd.Direction).\n\n        onChangesSaved(outputResources);\n      }\n    }\n  );\n\n  // Issue the event to open piskel\n  ipcRenderer.send('piskel-open-then-load-animation', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open JFXR to create wav resources.\n */\nexport const openJfxr = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('jfxr-changes-saved');\n  ipcRenderer.on(\n    'jfxr-changes-saved',\n    (event, newFilePath, externalEditorData) => {\n      const name = path.relative(projectPath, newFilePath);\n      createOrUpdateResource(project, new gd.AudioResource(), name);\n\n      const metadata = {\n        jfxr: externalEditorData,\n      };\n      project\n        .getResourcesManager()\n        .getResource(name)\n        .setMetadata(JSON.stringify(metadata));\n      onChangesSaved([{ metadata, name }]);\n    }\n  );\n\n  ipcRenderer.send('jfxr-create-wav', externalEditorData);\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { type ExternalEditorOpenOptions } from './ResourceExternalEditor.flow';\nimport {\n  createOrUpdateResource,\n  getLocalResourceFullPath,\n} from './ResourceUtils';\n\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\n/**\n * Open YARN to Create/Edit Json Dialogue Tree resources.\n */\nexport const openYarn = ({\n  project,\n  resourcesLoader,\n  resourceNames,\n  onChangesSaved,\n  extraOptions,\n}: ExternalEditorOpenOptions) => {\n  if (!electron || !ipcRenderer) return;\n  const projectPath = path.dirname(project.getProjectFile());\n  const initialResourcePath = getLocalResourceFullPath(\n    project,\n    resourceNames[0]\n  );\n\n  const externalEditorData = {\n    resourcePath: initialResourcePath,\n    externalEditorData: extraOptions.externalEditorData,\n    projectPath,\n  };\n\n  ipcRenderer.removeAllListeners('yarn-changes-saved');\n  ipcRenderer.on('yarn-changes-saved', (event, newFilePath) => {\n    const name = path.relative(projectPath, newFilePath);\n    createOrUpdateResource(project, new gd.JsonResource(), name);\n    onChangesSaved([{ name }]);\n  });\n\n  ipcRenderer.send('yarn-create-json', externalEditorData);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport LocalFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker, {\n  type SubscriptionCheckerInterface,\n} from '../../../Profile/Subscription/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n    });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: false,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkUserHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkUserHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() =>\n            this.setState({ networkPreviewDialogOpen: false })\n          }\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport TextField from '../../../UI/TextField';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\n\ntype Props = {|\n  open: boolean,\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nexport default class LocalNetworkDialog extends React.Component<Props, {}> {\n  render() {\n    const {\n      url,\n      open,\n      error,\n      onExport,\n      onClose,\n      onRunPreviewLocally,\n    } = this.props;\n    if (!open) return null;\n\n    return (\n      <Dialog\n        title={<Trans>Preview</Trans>}\n        actions={[\n          <FlatButton\n            key=\"close\"\n            label={<Trans>Close</Trans>}\n            primary\n            onClick={onClose}\n          />,\n        ]}\n        secondaryActions={[\n          onExport && (\n            <FlatButton\n              key=\"export\"\n              label={<Trans>Export game</Trans>}\n              onClick={onExport}\n            />\n          ),\n          <FlatButton\n            key=\"run-preview-locally\"\n            label={<Trans>Run on this computer</Trans>}\n            onClick={onRunPreviewLocally}\n          />,\n        ]}\n        open={open}\n        onRequestClose={onClose}\n      >\n        {error && (\n          <Line>\n            <Text>\n              <Trans>\n                Unable to start the server for the preview! Make sure that you\n                are authorized to run servers on this computer. Otherwise, use\n                classic preview to test your game.\n              </Trans>\n            </Text>\n          </Line>\n        )}\n        {!error && !url && <PlaceholderLoader />}\n        {!error && url && (\n          <div>\n            <Line>\n              <Text>\n                <Trans>\n                  Your preview is ready! On your mobile or tablet, open your\n                  browser and enter in the address bar:\n                </Trans>\n              </Text>\n            </Line>\n            <TextField value={url} fullWidth />\n            <Line>\n              <Text>\n                <Trans>\n                  Please note that your device should be connected on the same\n                  network as this computer.\n                </Trans>\n              </Text>\n            </Line>\n          </div>\n        )}\n      </Dialog>\n    );\n  }\n}\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { type Exporter } from '../ExportDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/CordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-cordova',\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/ElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-electron',\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <Column noMargin>\n          <ExplanationHeader />\n        </Column>\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { ExplanationHeader, DoneFooter } from '../GenericExporters/HTML5Export';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-html5',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFolderPicker\n          type=\"export\"\n          value={exportState.outputDir}\n          defaultPath={project.getLastCompilationDirectory()}\n          onChange={outputDir => {\n            updateExportState(() => ({ outputDir }));\n            project.setLastCompilationDirectory(outputDir);\n          }}\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Export as a HTML5 game</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      context.exportState.outputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            fullWidth\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-facebook-instant-games',\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState }) => (\n    <Column noMargin>\n      <Line>\n        <ExplanationHeader />\n      </Line>\n      <Line>\n        <LocalFilePicker\n          title={'Facebook Instant Games export zip file'}\n          message={\n            'Choose where to save the exported file for Facebook Instant Games'\n          }\n          filters={[\n            {\n              name: 'Compressed file for Facebook Instant Games',\n              extensions: ['zip'],\n            },\n          ]}\n          value={exportState.archiveOutputFilename}\n          defaultPath={app ? app.getPath('documents') : ''}\n          onChange={value =>\n            updateExportState(() => ({ archiveOutputFilename: value }))\n          }\n          fullWidth\n        />\n      </Line>\n    </Column>\n  ),\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForFacebookInstantGames', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState, onClose }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport * as React from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport FlatButton from '../FlatButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nconst LocalFilePicker = ({\n  value,\n  onChange,\n  title,\n  message,\n  defaultPath,\n  fullWidth,\n  filters,\n}: Props) => {\n  const onChooseFolder = async () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    const { filePath } = await dialog.showSaveDialog(browserWindow, {\n      title: title,\n      filters: filters,\n      message: message,\n      defaultPath: defaultPath,\n    });\n    onChange(filePath || '');\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.container,\n        width: fullWidth ? '100%' : undefined,\n      }}\n    >\n      <TextField\n        margin=\"dense\"\n        style={styles.textField}\n        type=\"text\"\n        translatableHintText={t`Choose a file`}\n        value={value}\n        onChange={(event, value) => onChange(value)}\n      />\n      <FlatButton\n        label={<Trans>Choose</Trans>}\n        style={styles.button}\n        onClick={onChooseFolder}\n      />\n    </div>\n  );\n};\n\nexport default LocalFilePicker;\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineCordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-cordova',\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Packaging for Android</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForCordova', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n} from '../GenericExporters/OnlineElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-electron',\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderLaunchButtonLabel: () => <Trans>Package</Trans>,\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exportOptions.set('exportForElectron', true);\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport { Trans } from '@lingui/macro';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  OnlineGameLink,\n} from '../GenericExporters/OnlineWebExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: 'local-online-web',\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderLaunchButtonLabel: () => <Trans>Generate link</Trans>,\n\n  renderCustomStepsProgress: ({\n    build,\n    project,\n    onSaveProject,\n    errored,\n    exportStep,\n  }) => (\n    <OnlineGameLink\n      build={build}\n      project={project}\n      onSaveProject={onSaveProject}\n      errored={errored}\n      exportStep={exportStep}\n    />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.MapStringBoolean();\n    exporter.exportWholePixiProject(\n      context.project,\n      temporaryOutputDir,\n      exportOptions\n    );\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |}\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport {\n  buildMainMenuDeclarativeTemplate,\n  type BuildMainMenuProps,\n  type MainMenuCallbacks,\n  type MainMenuEvent,\n} from './MainMenu';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = (ipcEvent: MainMenuEvent, func) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer) return;\n      const handler = (event, ...eventArgs) => func(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, func]\n  );\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = ({\n  props,\n  callbacks,\n}: {|\n  props: BuildMainMenuProps,\n  callbacks: MainMenuCallbacks,\n|}) => {\n  const { i18n, project, recentProjectFiles, shortcutMap } = props;\n  const language = i18n.language;\n\n  // We could use a for loop, but for safety let's write every hook one by\n  // one to avoid any change at runtime which would break the rules of hooks.\n  useIPCEventListener('main-menu-open', callbacks.onChooseProject);\n  useIPCEventListener('main-menu-open-recent', callbacks.onOpenRecentFile);\n  useIPCEventListener('main-menu-save', callbacks.onSaveProject);\n  useIPCEventListener('main-menu-save-as', callbacks.onSaveProjectAs);\n  useIPCEventListener('main-menu-close', callbacks.onCloseProject);\n  useIPCEventListener('main-menu-close-app', callbacks.onCloseApp);\n  useIPCEventListener('main-menu-export', callbacks.onExportProject);\n  useIPCEventListener('main-menu-create-template', callbacks.onCreateProject);\n  useIPCEventListener('main-menu-create-blank', callbacks.onCreateBlank);\n  useIPCEventListener(\n    'main-menu-open-project-manager',\n    callbacks.onOpenProjectManager\n  );\n  useIPCEventListener('main-menu-open-home-page', callbacks.onOpenHomePage);\n  useIPCEventListener('main-menu-open-debugger', callbacks.onOpenDebugger);\n  useIPCEventListener('main-menu-open-about', callbacks.onOpenAbout);\n  useIPCEventListener(\n    'main-menu-open-preferences',\n    callbacks.onOpenPreferences\n  );\n  useIPCEventListener('main-menu-open-language', callbacks.onOpenLanguage);\n  useIPCEventListener('main-menu-open-profile', callbacks.onOpenProfile);\n  useIPCEventListener(\n    'main-menu-open-games-dashboard',\n    callbacks.onOpenGamesDashboard\n  );\n  useIPCEventListener('update-status', callbacks.setElectronUpdateStatus);\n\n  React.useEffect(\n    () => {\n      if (ipcRenderer) {\n        ipcRenderer.send(\n          'set-main-menu',\n          buildMainMenuDeclarativeTemplate({\n            project,\n            i18n,\n            recentProjectFiles,\n            shortcutMap,\n            isApplicationTopLevelMenu: true,\n          })\n        );\n      }\n    },\n    [i18n, language, project, recentProjectFiles, shortcutMap]\n  );\n\n  const { onOpenRecentFile } = callbacks;\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (extensionModule) {\n                // Load any editor for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsEditorService &&\n                  extensionModule.registerEditorConfigurations\n                ) {\n                  extensionModule.registerEditorConfigurations(\n                    objectsEditorService\n                  );\n                }\n\n                // Load any renderer for objects, if we have somewhere where\n                // to register them.\n                if (\n                  objectsRenderingService &&\n                  extensionModule.registerInstanceRenderers\n                ) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n\n                return {\n                  extensionModulePath,\n                  result: loadExtension(\n                    _,\n                    gd,\n                    gd.JsPlatform.get(),\n                    extensionModule\n                  ),\n                };\n              }\n\n              return {\n                extensionModulePath,\n                result: {\n                  error: true,\n                  message:\n                    'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                },\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeObjectCode: (\n      objectCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(objectCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName || 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n\n  static chooseCustomObjectFile = (objectName?: string): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an object of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 object configuration',\n            extensions: ['gdo'],\n          },\n        ],\n        defaultPath: objectName || 'Object',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeCustomObject = (\n    customObject: gdObject,\n    filepath: string\n  ): Promise<void> => {\n    const exportedObject = customObject.clone().get();\n    exportedObject.setTags('');\n    exportedObject.getVariables().clear();\n    exportedObject.getEffects().clear();\n    exportedObject\n      .getAllBehaviorNames()\n      .toJSArray()\n      .forEach(name => exportedObject.removeBehavior(name));\n    const serializedObject = serializeToJSObject(exportedObject);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the object:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showOpenDialog(browserWindow, {\n        title: 'Import an extension in the project',\n        properties: ['openFile'],\n        message: 'Choose an extension file to import (.json file)',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n      })\n      .then(({ filePaths }) => {\n        if (!filePaths || !filePaths.length) return null;\n        return filePaths[0];\n      });\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport LocalFileSystem from '../../Export/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { moveAllCloudProjectResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  getCredentialsForCloudProject,\n  uploadProjectResourceFiles,\n  type UploadedProjectResourceFiles,\n} from '../../Utils/GDevelopServices/Project';\nimport { processByChunk } from '../../Utils/ProcessByChunk';\nimport { readLocalFileToFile } from '../../Utils/LocalFileUploader';\nimport { isURL, isBlobURL } from '../../ResourcesList/ResourceUtils';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\nconst moveNothing = async () => {\n  return {\n    erroredResources: [],\n  };\n};\n\ntype ResourceAndFile = {|\n  resource: gdResource,\n  file: File,\n|};\n\nexport const moveAllLocalResourcesToCloudResources = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  const resourcesManager = project.getResourcesManager();\n\n  /**\n   * Find the local resources that must be\n   * uploaded into the new project.\n   */\n  const getResourcesToUpload = (project: gdProject): Array<gdResource> => {\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?gdResource => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              // URL from a cloud project: this is unlikely and would not work\n              // (as the project is a local project). Still, ignore this.\n              return null;\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource to be downloaded.\n            return resource;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const allResourcesToUpload = getResourcesToUpload(project);\n\n  const projectPath = path.dirname(oldFileMetadata.fileIdentifier);\n\n  let alreadyDoneCount = 0;\n  // Read all files as Files.\n  await processByChunk(allResourcesToUpload, {\n    transformItem: async (resource): Promise<ResourceAndFile | null> => {\n      const resourceAbsolutePath = path.resolve(\n        projectPath,\n        resource.getFile()\n      );\n\n      try {\n        const file = await readLocalFileToFile(resourceAbsolutePath);\n        return {\n          resource,\n          file,\n        };\n      } catch (error) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            `Unable to open the file (${resourceAbsolutePath}).`\n          ),\n        });\n        return null;\n      }\n    },\n    isChunkTooBig: (resourceAndFilesChunk: Array<ResourceAndFile | null>) => {\n      if (resourceAndFilesChunk.length > 70) return true;\n\n      const allBufferSize = resourceAndFilesChunk\n        .filter(Boolean)\n        .reduce((size, { file }) => size + file.size, 0);\n\n      // Stop a chunk when more than 150MB are read to be uploaded. This is\n      // to avoid loading all resources in memory at once. This don't give an exact\n      // guarantee on the upper bound (a single file could be more than 150MB), but\n      // this limits the risks of running out of memory.\n      return allBufferSize > 150 * 1000 * 1000;\n    },\n    processChunk: async (\n      resourceAndFilesChunk: Array<ResourceAndFile | null>\n    ) => {\n      const resourceAndFilesToUpload: ResourceAndFile[] = resourceAndFilesChunk.filter(\n        Boolean\n      );\n\n      // Upload the files just read, for the new project.\n      await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n      const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n        authenticatedUser,\n        newCloudProjectId,\n        resourceAndFilesToUpload.map(({ file }) => file),\n        (count, total) => {\n          onProgress(alreadyDoneCount + count, allResourcesToUpload.length);\n        }\n      );\n      alreadyDoneCount += resourceAndFilesChunk.length;\n\n      // Update resources with the newly created URLs.\n      uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n        const resource = resourceAndFilesToUpload[index].resource;\n        if (error || !url) {\n          result.erroredResources.push({\n            resourceName: resource.getName(),\n            error: error || new Error('Unknown error during upload.'),\n          });\n          return;\n        }\n\n        resource.setFile(url);\n      });\n    },\n  });\n\n  return result;\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(\n      new gd.AbstractFileSystemJS(),\n      new LocalFileSystem()\n    );\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      // $FlowFixMe - fileSystem is a gdAbstractFileSystem, despite the assignIn.\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // When saving a Cloud project locally, all resources are downloaded (including\n  // the ones on GDevelop Cloud).\n  [`${CloudStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n    }),\n\n  // Moving to GDevelop \"Cloud\" storage:\n\n  // From a local project to a Cloud project, all resources are uploaded.\n  [`${LocalFileStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllLocalResourcesToCloudResources,\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllCloudProjectResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on GDevelop Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveNothing,\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\n\nexport const processByChunk = async <Item, MappedItem>(\n  array: Array<Item>,\n  {\n    transformItem,\n    isChunkTooBig,\n    processChunk,\n  }: {|\n    transformItem: Item => Promise<MappedItem>,\n    isChunkTooBig: (MappedItem[]) => boolean,\n    processChunk: (MappedItem[]) => Promise<void>,\n  |}\n): Promise<void> => {\n  let currentItemIndex = 0;\n  const nextChunk: Array<MappedItem> = [];\n\n  while (currentItemIndex < array.length) {\n    const mappedItem = await transformItem(array[currentItemIndex]);\n\n    if (!nextChunk.length) {\n      // Existing chunk is empty - let the new item be added to it.\n    } else {\n      if (!isChunkTooBig([...nextChunk, mappedItem])) {\n        // Item can be added to the existing chunk - let's add it.\n      } else {\n        // Item can't be added to the existing chunk - process the existing chunk\n        await processChunk(nextChunk);\n        nextChunk.length = 0;\n      }\n    }\n\n    nextChunk.push(mappedItem);\n    currentItemIndex++;\n  }\n\n  if (nextChunk.length) {\n    await processChunk(nextChunk);\n    nextChunk.length = 0;\n  }\n\n  return;\n};\n","// @flow\r\nimport optionalRequire from './OptionalRequire';\r\nconst path = optionalRequire('path');\r\nconst fs = optionalRequire('fs');\r\n\r\nconst readLocalFileToArrayBuffer = async (\r\n  filePath: string\r\n): Promise<ArrayBuffer> => {\r\n  const buffer: Buffer = await new Promise((resolve, reject) => {\r\n    fs.readFile(filePath, function(err, buffer) {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      resolve(buffer);\r\n    });\r\n  });\r\n\r\n  // See https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer:\r\n  // The slice and offset stuff is required because small Buffers (less than 4 kB by default, half the pool size)\r\n  // can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer.\r\n  const arrayBuffer = buffer.buffer.slice(\r\n    buffer.byteOffset,\r\n    buffer.byteOffset + buffer.byteLength\r\n  );\r\n  return arrayBuffer;\r\n};\r\n\r\n// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types.\r\nconst extensionToMimeType = {\r\n  // Common audio extensions:\r\n  aac: 'audio/aac',\r\n  wav: 'audio/wav',\r\n  mp3: 'audio/mp3',\r\n  ogg: 'audio/ogg',\r\n\r\n  // Common image extensions:\r\n  png: 'image/png',\r\n  jpg: 'image/jpeg',\r\n  jpeg: 'image/jpeg',\r\n  webp: 'image/webp',\r\n\r\n  // Common font extensions:\r\n  ttf: 'font/ttf',\r\n  otf: 'font/otf',\r\n\r\n  // Common video extensions:\r\n  mp4: 'video/mp4',\r\n  webm: 'video/webm',\r\n\r\n  // Other common extensions:\r\n  json: 'application/json',\r\n  xml: 'application/xml',\r\n  gz: 'application/gzip',\r\n  js: 'application/javascript',\r\n};\r\n\r\nexport const readLocalFileToFile = async (filePath: string): Promise<File> => {\r\n  const arrayBuffer = await readLocalFileToArrayBuffer(filePath);\r\n  const extensionWithoutLeadingDot = path.extname(filePath).replace(/^\\./, '');\r\n  return new File([arrayBuffer], path.basename(filePath), {\r\n    type:\r\n      extensionToMimeType[extensionWithoutLeadingDot] ||\r\n      'application/octet-stream',\r\n  });\r\n};\r\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\nimport { moveUrlResourcesToCloudFilesIfPrivate } from '../CloudStorageProvider/CloudResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The Cloud file storage provider fetches the resources that are\n  // private URLs by downloading them and reuploading them to the cloud.\n  [CloudStorageProvider.internalName]: moveUrlResourcesToCloudFilesIfPrivate,\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport newNameGenerator from '../Utils/NewNameGenerator';\nimport { isPathInProjectFolder } from './ResourceUtils';\nimport { createNewResource } from './ResourceSource';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport type EmbeddedResource = {|\n  resourceKind: string,\n  resourceName?: string,\n\n  /** The \"path\" to the embedded resource (e.g: a tileset) as stored in the parent resource (e.g: a tilemap). */\n  relPath: string,\n\n  /** The full path to the file of the embedded resource. */\n  fullPath: string,\n\n  /** True if the embedded resource file is outside the project folder. */\n  isOutsideProjectFolder: boolean,\n|};\n\nexport type EmbeddedResources = {|\n  hasAnyEmbeddedResourceOutsideProjectFolder: boolean,\n  embeddedResources: Map<string, EmbeddedResource>,\n|};\n\nexport type MappedResources = {|\n  mapping: { [key: string]: string },\n|};\n\ntype ParseEmbeddedFiles = (\n  project: gdProject,\n  filePath: string\n) => Promise<?EmbeddedResources>;\n\n/**\n * Copy the embedded resources inside the project folder\n */\nexport async function copyAllEmbeddedResourcesToProjectFolder(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n) {\n  if (!fs || !path) {\n    return;\n  }\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const copies = [];\n\n  for (const {\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n    embeddedResources,\n  } of filesWithEmbeddedResources.values()) {\n    if (!hasAnyEmbeddedResourceOutsideProjectFolder) continue;\n\n    for (const embedded of embeddedResources.values()) {\n      if (!embedded.isOutsideProjectFolder) continue;\n\n      const resourceBasename = path.basename(embedded.fullPath);\n      const fileExtension = path.extname(resourceBasename);\n      const fileNameWithoutExtension = path.basename(\n        resourceBasename,\n        fileExtension\n      );\n\n      const newFileNameWithoutExtension = newNameGenerator(\n        fileNameWithoutExtension,\n        tentativeFileName => {\n          const tentativePath =\n            path.join(projectPath, tentativeFileName) + fileExtension;\n          return fs.existsSync(tentativePath);\n        }\n      );\n\n      const resourceNewPath = path.join(\n        projectPath,\n        newFileNameWithoutExtension + fileExtension\n      );\n\n      embedded.resourceName = newFileNameWithoutExtension + fileExtension;\n\n      copies.push(fs.promises.copyFile(embedded.fullPath, resourceNewPath));\n    }\n  }\n\n  return Promise.all(copies);\n}\n\n/**\n * Create the mapping between embedded resource path (e.g: path to a tileset) to its resource name (i.e: the name of\n * the resource containing the tileset).\n */\nexport function createAndMapEmbeddedResources(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n): Map<string, MappedResources> {\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const filesWithMappedResources = new Map<string, MappedResources>();\n  for (const [filePath, { embeddedResources }] of filesWithEmbeddedResources) {\n    const mapping = {};\n    for (let {\n      resourceKind,\n      resourceName,\n      relPath,\n      fullPath,\n    } of embeddedResources.values()) {\n      if (!resourceName) {\n        resourceName = path.relative(projectPath, fullPath);\n      }\n\n      const theEmbeddedResource = createNewResource(resourceKind);\n      if (theEmbeddedResource) {\n        theEmbeddedResource.setName(resourceName);\n        theEmbeddedResource.setFile(resourceName);\n\n        mapping[relPath] = resourceName;\n\n        project.getResourcesManager().addResource(theEmbeddedResource);\n      }\n    }\n\n    filesWithMappedResources.set(filePath, {\n      mapping,\n    });\n  }\n\n  return filesWithMappedResources;\n}\n\n/**\n * List the embedded resources of a Tilemap (or JSON) resource.\n * Supports LDtk tilemaps.\n *\n * @param project The project\n * @param filePath The file path of a resource\n * @returns\n */\nexport async function listTileMapEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) {\n    return null;\n  }\n\n  const data = await fs.promises.readFile(filePath, 'utf8');\n  try {\n    const tileMap = JSON.parse(data);\n\n    // For LDtk tilemaps, read the tilesets.\n    if (tileMap && tileMap.__header__ && tileMap.__header__.app === 'LDtk') {\n      const dir = path.dirname(filePath);\n      const embeddedResources = new Map<string, EmbeddedResource>();\n      let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n      for (const tileset of tileMap.defs.tilesets) {\n        if (tileset.relPath) {\n          const relPath = tileset.relPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(relPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      for (const level of tileMap.levels) {\n        if (level.bgRelPath) {\n          const relPath = level.bgRelPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(level.bgRelPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      return {\n        hasAnyEmbeddedResourceOutsideProjectFolder,\n        embeddedResources,\n      };\n    }\n  } catch (error) {\n    console.error(\n      `Unable to read properly the data from file ${filePath} for use as a tilemap - ignoring any potentially embedded resources.`\n    );\n    return null;\n  }\n}\n\nexport const embeddedResourcesParsers: { [string]: ParseEmbeddedFiles } = {\n  tilemap: listTileMapEmbeddedResources,\n  json: listTileMapEmbeddedResources,\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ChooseResourceProps,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nimport {\n  copyAllEmbeddedResourcesToProjectFolder,\n  embeddedResourcesParsers,\n  createAndMapEmbeddedResources,\n  type EmbeddedResources,\n  type MappedResources,\n} from './LocalEmbeddedResourceSources';\nimport { Line } from '../UI/Grid';\nimport RaisedButton from '../UI/RaisedButton';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nconst localResourceSources: Array<ResourceSource> = [\n  // Have the local resource sources first, so they are used by default/shown first when\n  // the project is saved locally.\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => {\n      const selectLocalFileResources = async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n      }: ChooseResourceProps) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        let hasFilesOutsideProjectFolder = filePaths.some(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        // Some resources, like tilemaps, can have references to other files.\n        // We parse these files, optionally copy them, then create a mapping from the previous file name\n        // as written inside the tilemap to the name of the resource that is representing this file.\n        const filesWithEmbeddedResources = new Map<string, EmbeddedResources>();\n        const parseEmbeddedResources = embeddedResourcesParsers[kind];\n        if (parseEmbeddedResources) {\n          for (const filePath of filePaths) {\n            const embeddedResources = await parseEmbeddedResources(\n              project,\n              filePath\n            );\n\n            if (embeddedResources) {\n              filesWithEmbeddedResources.set(filePath, embeddedResources);\n\n              if (embeddedResources.hasAnyEmbeddedResourceOutsideProjectFolder)\n                hasFilesOutsideProjectFolder = true;\n            }\n          }\n        }\n\n        // Check if files should be copied in the project folder.\n        const newToOldFilePaths = new Map<string, string>();\n        let filesWithMappedResources = new Map<string, MappedResources>();\n        if (hasFilesOutsideProjectFolder) {\n          const answer = Window.showConfirmDialog(\n            i18n._(\n              t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n            )\n          );\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(\n              project,\n              filePaths,\n              newToOldFilePaths\n            );\n\n            await copyAllEmbeddedResourcesToProjectFolder(\n              project,\n              filesWithEmbeddedResources\n            );\n          }\n        }\n\n        // In case of resources embedded inside others,\n        // create a mapping from the file name\n        // as written inside the resource (e.g: the tilemap)\n        // to the name of the resource that was created to\n        // represent this file.\n        filesWithMappedResources = createAndMapEmbeddedResources(\n          project,\n          filesWithEmbeddedResources\n        );\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          const filePathWithMapping = newToOldFilePaths.has(filePath)\n            ? newToOldFilePaths.get(filePath)\n            : filePath;\n          if (filePathWithMapping) {\n            const mappedResources = filesWithMappedResources.get(\n              filePathWithMapping\n            );\n\n            if (mappedResources && mappedResources.mapping) {\n              newResource.setMetadata(\n                JSON.stringify({\n                  embeddedResourcesMapping: mappedResources.mapping,\n                })\n              );\n            }\n          }\n\n          return newResource;\n        });\n      };\n\n      return {\n        name: 'local-file-opener-' + kind,\n        displayName: t`Choose a file`,\n        displayTab: 'import',\n        onlyForStorageProvider: 'LocalFile',\n        kind,\n        selectResourcesHeadless: selectLocalFileResources,\n        renderComponent: (props: ResourceSourceComponentProps) => (\n          <Line justifyContent=\"center\">\n            <RaisedButton\n              primary\n              label={\n                props.options.multiSelection ? (\n                  <Trans>Choose one or more files</Trans>\n                ) : (\n                  <Trans>Choose a file</Trans>\n                )\n              }\n              onClick={async () => {\n                const resources = await selectLocalFileResources({\n                  i18n: props.i18n,\n                  project: props.project,\n                  fileMetadata: props.fileMetadata,\n                  getStorageProvider: props.getStorageProvider,\n                  getLastUsedPath: props.getLastUsedPath,\n                  setLastUsedPath: props.setLastUsedPath,\n                  options: props.options,\n                });\n\n                props.onChooseResources(resources);\n              }}\n            />\n          </Line>\n        ),\n      };\n    }\n  ),\n  // Have the \"asset store\" source before the \"file(s) from your device\" source,\n  // for cloud projects, so that the asset store is opened by default when clicking\n  // on a button without opening a menu showing all sources.\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    onlyForStorageProvider: 'Cloud',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default localResourceSources;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ExportDialog from './Export/ExportDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './Export/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './Export/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            LocalFileStorageProvider,\n            UrlStorageProvider,\n            CloudStorageProvider,\n          ]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={(props, callbacks) => (\n                <ElectronMainMenu props={props} callbacks={callbacks} />\n              )}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderExportDialog={props => (\n                <ExportDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport { isURL } from '../../ResourcesList/ResourceUtils';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\n\nconst gd: libGDevelop = global.gd;\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nclass LocalFileSystem {\n  /**\n   * True if URLs should be downloaded (useful for an export, but not for a preview).\n   * @private\n   */\n  _downloadUrlsToLocalFiles: boolean;\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  constructor(\n    options: ?{|\n      downloadUrlsToLocalFiles: boolean,\n    |}\n  ) {\n    this._downloadUrlsToLocalFiles =\n      !!options && options.downloadUrlsToLocalFiles;\n  }\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified destination path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    // Ensure the path prefix we're searching the files in is normalized,\n    // because everything that we stored was normalized. If we don't do this,\n    // we risk missing files on Windows (as pathPrefix can contain backslashes).\n    const normalizedPathPrefix = pathPosix\n      .normalize(pathPrefix)\n      .replace(/\\\\/g, '/');\n\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(normalizedPathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return;\n    }\n\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  dirExists = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return true;\n    }\n\n    return fs.existsSync(path);\n  };\n  clearDir = (path: string) => {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  };\n  getTempDir = () => {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  };\n  fileNameFrom = (fullPath: string) => {\n    // If URLs are not downloaded, then filenames are not changed.\n    if (!this._downloadUrlsToLocalFiles && isURL(fullPath)) return fullPath;\n\n    return path.basename(fullPath);\n  };\n  dirNameFrom = (fullPath: string) => {\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  isAbsolute = (fullPath: string) => {\n    if (isURL(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    if (isURL(source)) {\n      // If URLs are not downloaded, then there is nothing to copy.\n      if (!this._downloadUrlsToLocalFiles) return true;\n\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  writeToFile = (file: string, contents: string) => {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  readFile = (file: string) => {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  };\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  };\n  fileExists = (filePath: string) => {\n    // Check if a file WILL exists once downloaded.\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    const shouldTheFileBeDownloaded = !!this._filesToDownload[\n      normalizedFilePath\n    ];\n    if (shouldTheFileBeDownloaded) {\n      return true;\n    }\n\n    // Check if a local file exists.\n    try {\n      const stat = fs.statSync(filePath);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n}\n\nexport default LocalFileSystem;\n","// @flow\r\nimport PromisePool from '@supercharge/promise-pool';\r\nimport { retryIfFailed } from './RetryIfFailed';\r\nimport optionalRequire from './OptionalRequire';\r\nconst electron = optionalRequire('electron');\r\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\r\n\r\ntype Input<Item> = {|\r\n  urlContainers: Array<Item>,\r\n  onProgress: (count: number, total: number) => void,\r\n  throwIfAnyError: boolean,\r\n|};\r\n\r\nexport type ItemResult<Item> = {|\r\n  item: Item,\r\n  error?: Error,\r\n|};\r\n\r\nexport const downloadUrlsToLocalFiles = async <\r\n  Item: { url: string, filePath: string }\r\n>({\r\n  urlContainers,\r\n  onProgress,\r\n  throwIfAnyError,\r\n}: Input<Item>): Promise<Array<ItemResult<Item>>> => {\r\n  let count = 0;\r\n  let firstError = null;\r\n  if (!ipcRenderer)\r\n    throw new Error('Download to local files is not supported.');\r\n\r\n  const { results } = await PromisePool.withConcurrency(20)\r\n    .for(urlContainers)\r\n    .process<ItemResult<Item>>(async urlContainer => {\r\n      const { url, filePath } = urlContainer;\r\n\r\n      try {\r\n        await retryIfFailed({ times: 2 }, async () => {\r\n          await ipcRenderer.invoke('local-file-download', url, filePath);\r\n        });\r\n\r\n        const result: ItemResult<Item> = {\r\n          item: urlContainer,\r\n        };\r\n        return result;\r\n      } catch (error) {\r\n        firstError = error;\r\n        const result: ItemResult<Item> = {\r\n          item: urlContainer,\r\n          error,\r\n        };\r\n        return result;\r\n      } finally {\r\n        onProgress(count++, urlContainers.length);\r\n      }\r\n    });\r\n\r\n  if (throwIfAnyError && firstError) {\r\n    throw firstError;\r\n  }\r\n\r\n  return results;\r\n};\r\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize}} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst readJSONFile = (filepath: string): Promise<Object> => {\n  if (!fs) return Promise.reject('Filesystem is not supported.');\n\n  return new Promise((resolve, reject) => {\n    fs.readFile(filepath, { encoding: 'utf8' }, (err, data) => {\n      if (err) return reject(err);\n\n      try {\n        const dataObject = JSON.parse(data);\n        return resolve(dataObject);\n      } catch (ex) {\n        return reject(filepath + ' is a corrupted/malformed file.');\n      }\n    });\n  });\n};\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  if (!dialog) return Promise.reject('Not supported');\n  const browserWindow = remote.getCurrentWindow();\n\n  return dialog\n    .showOpenDialog(browserWindow, {\n      title: 'Open a project',\n      properties: ['openFile'],\n      message:\n        'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n      filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n    })\n    .then(({ filePaths }) => {\n      if (!filePaths || !filePaths.length) return null;\n      return { fileIdentifier: filePaths[0] };\n    });\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const hasAutoSave = async (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<boolean> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    if (!compareLastModified) {\n      return true;\n    }\n    try {\n      const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      // When comparing the last modified time, add a 5 seconds margin to avoid\n      // showing the warning if the user has just saved the project, or if the\n      // project has been decompressed from a zip file, causing the last modified\n      // time to be the time of decompression.\n      if (autoSavedTime > saveTime + 5000) {\n        return true;\n      }\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return false;\n    }\n    return false;\n  }\n  return false;\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata, type SaveAsLocation } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nexport const writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set([\n          '/layouts/*',\n          '/externalLayouts/*',\n          '/externalEvents/*',\n          '/layouts/*',\n          '/eventsFunctionsExtensions/*',\n        ])\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const now = Date.now();\n  if (!filePath) {\n    return Promise.reject(\n      'Project file is empty, \"Save as\" should have been called?'\n    );\n  }\n  const newFileMetadata = {\n    ...fileMetadata,\n    lastModifiedDate: now,\n  };\n\n  const projectPath = path.dirname(filePath);\n  return writeProjectFiles(project, filePath, projectPath).then(() => {\n    return { wasSaved: true, fileMetadata: newFileMetadata }; // Save was properly done\n  });\n};\n\nexport const onChooseSaveProjectAsLocation = async ({\n  project,\n  fileMetadata,\n}: {|\n  project: gdProject,\n  fileMetadata: ?FileMetadata, // This is the current location.\n|}): Promise<{|\n  saveAsLocation: ?SaveAsLocation, // This is the newly chosen location (or null if cancelled).\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const browserWindow = remote.getCurrentWindow();\n  const saveDialogOptions = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    throw new Error('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, saveDialogOptions);\n  if (!filePath) {\n    return { saveAsLocation: null };\n  }\n\n  return {\n    saveAsLocation: {\n      fileIdentifier: filePath,\n    },\n  };\n};\n\nexport const onSaveProjectAs = async (\n  project: gdProject,\n  saveAsLocation: ?SaveAsLocation,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: ({|\n      newFileMetadata: FileMetadata,\n    |}) => Promise<void>,\n  |}\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  if (!saveAsLocation)\n    throw new Error('A location was not chosen before saving as.');\n  const filePath = saveAsLocation.fileIdentifier;\n  if (!filePath)\n    throw new Error('A file path was not chosen before saving as.');\n\n  options.onStartSaving();\n  const newFileMetadata = { fileIdentifier: filePath };\n\n  // Move (copy or download, etc...) the resources first.\n  await options.onMoveResources({ newFileMetadata });\n\n  // Save the project when resources have been copied.\n  const projectPath = path.dirname(filePath);\n  project.setProjectFile(filePath);\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n    fileMetadata: newFileMetadata,\n  };\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n\nexport const getWriteErrorMessage = (error: Error): MessageDescriptor =>\n  t`An error occurred when saving the project. Please try again by choosing another location.`;\n\nexport const onRenderNewProjectSaveAsLocationChooser = ({\n  saveAsLocation,\n  setSaveAsLocation,\n  newProjectsDefaultFolder,\n}: {\n  saveAsLocation: ?SaveAsLocation,\n  setSaveAsLocation: (?SaveAsLocation) => void,\n  newProjectsDefaultFolder?: string,\n}) => {\n  const outputPath = saveAsLocation\n    ? path.dirname(saveAsLocation.fileIdentifier)\n    : newProjectsDefaultFolder\n    ? newProjectsDefaultFolder\n    : '';\n  if (!saveAsLocation) {\n    setSaveAsLocation({\n      fileIdentifier: path.join(outputPath, 'game.json'),\n    });\n  }\n\n  return (\n    <LocalFolderPicker\n      fullWidth\n      value={outputPath}\n      onChange={newOutputPath =>\n        setSaveAsLocation({\n          fileIdentifier: path.join(newOutputPath, 'game.json'),\n        })\n      }\n      type=\"create-game\"\n    />\n  );\n};\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\nimport * as React from 'react';\nimport { t } from '@lingui/macro';\nimport { type StorageProvider } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  hasAutoSave,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n  onRenderNewProjectSaveAsLocationChooser,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  onRenderNewProjectSaveAsLocationChooser: onRenderNewProjectSaveAsLocationChooser,\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    hasAutoSave,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n  }),\n}: StorageProvider);\n"],"sourceRoot":""}